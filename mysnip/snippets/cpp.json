{
  "for": {
    "prefix": "for",
    "body": [
      "for(${1}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },

  "while": {
    "prefix": "while",
    "body": ["while(${1:1}) {", "\t$0", "}"],
    "description": ""
  },

  "if": {
    "prefix": "if",
    "body": ["if($1) {", "\t$0", "}"],
    "description": "Code snippet for if statement"
  },

  "else": {
    "prefix": "else",
    "body": ["else {", "\t$0", "}"],
    "description": "Code snippet for else statement"
  },

  "else if": {
    "prefix": "else if",
    "body": ["else if($1) {", "\t$0", "}"],
    "description": "Code snippet for else-if statement"
  },

  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
    "description": "Code snippet for enum"
  },

  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif"],
    "description": "Code snippet for #ifdef"
  },

  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif"],
    "description": "Code snippet for #ifndef"
  },

  "#if": {
    "prefix": "#if",
    "body": ["#if ${1:0}", "$0", "#endif"],
    "description": "Code snippet for #if"
  },

  "typedef struct": {
    "prefix": "struct",
    "body": ["typedef struct {", "\t$0", "} ${1:MyStruct};"],
    "description": "Code snippet to define a type with struct"
  },

  "switch": {
    "prefix": "switch",
    "body": ["switch(${1:switch_on}) {", "\tdefault:", "\t\t$0", "\t\tbreak;", "}"],
    "description": "Code snippet for switch statement"
  },

  "case": {
    "prefix": "case",
    "body": ["case $1:", "\t$0", "\tbreak;"],
    "description": "Code snippet for case branch"
  },

  "union": {
    "prefix": "union",
    "body": ["union ${1:MyUnion} {", "\t$0", "};"],
    "description": "Code snippet for union"
  },

  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$0\""],
    "description": "Code snippet for #include \" \""
  },

  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$0>"],
    "description": "Code snippet for #include < >"
  },

  "#def": {
    "prefix": "#def",
    "body": ["#define $0"],
    "description": "Code snippet for #define \" \""
  },

  "Main function template": {
    "prefix": "main",
    "body": [
      "#include <iostream>",
      "using namespace std;",
      "int main(int argc, char *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C program"
  },

  "Do...while loop": {
    "prefix": "do",
    "body": ["do {", "\t$1", "} while($2);"],
    "description": "Creates a do...while loop"
  },


  "Print variable of type integer": {
    "prefix": "printf",
    "body": ["printf(\"$1\\n\", $2)$0"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },


  "scanf": {
    "prefix": "scanf",
    "body": ["scanf(\"$1\",$2)$0"],
    "description": "Generic scanf() snippet"
  },

  "malloc": {
    "prefix": "malloc",
    "body": ["malloc(sizeof($1))$0"],
    "description": "Generic ddddd() snippet"
  },


  "foreach": {
    "prefix": "foreach",
    "body": ["for(${1:auto} ${2:var} : ${3:collection_to_loop})", "{", "\t$0", "}"],
    "description": "Code snippet for range-based for loop (c++11) statement"
  },

  "class": {
    "prefix": "class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\t~$1();",
      "\t$2",
      "",
      "private:",
      "\t$3",
      "protected:",
      "};"
    ],
    "description": "Code snippet for class"
  },

  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t",
      "}",
      "catch (const std::exception&) {",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch"
  },

  "cout": {
    "prefix": "cout",
    "body": ["cout << \"${1:message}\" << std::endl;"],
    "description": "Code snippet for printing to std::cout, provided the header is set"
  },

  "cin": {
    "prefix": "cin",
    "body": ["cin >> $1;"],
    "description": "Code snippet for std::cin, provided the header is set"
  },
  "temp": {
    "prefix": "temp",
    "body": ["template<typename $1>"],
    "description": "Code snippet for std::cin, provided the header is set"
  }
}
